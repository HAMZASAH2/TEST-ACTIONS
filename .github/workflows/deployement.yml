# Deployment Workflow
name: Deploy

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

jobs:
  deploy:
    runs-on: ubuntu-22.04
    # Only run if all tests pass
    needs: []
    
    environment: 
      name: ${{ github.event.inputs.environment || (startsWith(github.ref, 'refs/tags/') && 'production' || 'staging') }}
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Set deployment variables
        id: vars
        run: |
          if [ "${{ github.event.inputs.environment }}" = "production" ] || [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "deploy_url=${{ secrets.PRODUCTION_URL }}" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "deploy_url=${{ secrets.STAGING_URL }}" >> $GITHUB_OUTPUT
          fi
          
          echo "version=${GITHUB_SHA:0:8}" >> $GITHUB_OUTPUT
          
      - name: Validate deployment readiness
        run: |
          echo "🔍 Validating deployment readiness..."
          
          # Check for required secrets
          if [ -z "${{ secrets.DEPLOY_SSH_KEY }}" ]; then
            echo "❌ Missing DEPLOY_SSH_KEY secret"
            exit 1
          fi
          
          # Check modules exist
          modules=$(find . -name "__manifest__.py" -type f | sed 's|/__manifest__.py||' | sed 's|^\./||')
          if [ -z "$modules" ]; then
            echo "❌ No modules found for deployment"
            exit 1
          fi
          
          echo "📦 Modules to deploy:"
          echo "$modules" | while read module; do
            echo "  - $module"
          done
          
      - name: Create deployment package
        run: |
          echo "📦 Creating deployment package..."
          
          # Create deployment directory
          mkdir -p deploy/addons
          
          # Copy modules
          find . -name "__manifest__.py" -type f | while read manifest; do
            module_dir=$(dirname "$manifest")
            module_name=$(basename "$module_dir")
            
            echo "📁 Packaging $module_name..."
            cp -r "$module_dir" "deploy/addons/"
          done
          
          # Create deployment info
          cat > deploy/deployment-info.json << EOF
          {
            "version": "${{ steps.vars.outputs.version }}",
            "environment": "${{ steps.vars.outputs.environment }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "modules": [$(find deploy/addons -name "__manifest__.py" | sed 's|deploy/addons/||' | sed 's|/__manifest__.py||' | sed 's/.*/"&"/' | tr '\n' ',' | sed 's/,$//')],
            "deployer": "${{ github.actor }}"
          }
          EOF
          
          # Create deployment script
          cat > deploy/deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "🚀 Starting Odoo module deployment..."
          
          # Load deployment info
          VERSION=$(jq -r '.version' deployment-info.json)
          ENVIRONMENT=$(jq -r '.environment' deployment-info.json)
          MODULES=$(jq -r '.modules[]' deployment-info.json | tr '\n' ',' | sed 's/,$//')
          
          echo "📋 Deployment Details:"
          echo "  Version: $VERSION"
          echo "  Environment: $ENVIRONMENT"
          echo "  Modules: $MODULES"
          
          # Backup current modules (if they exist)
          if [ -d "/opt/odoo/custom-addons" ]; then
            echo "💾 Creating backup..."
            cp -r /opt/odoo/custom-addons "/opt/odoo/backup-$(date +%Y%m%d-%H%M%S)"
          fi
          
          # Deploy new modules
          echo "📁 Deploying modules..."
          mkdir -p /opt/odoo/custom-addons
          cp -r addons/* /opt/odoo/custom-addons