# Module Structure and Manifest Validation
name: Module Validation

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  validate-modules:
    runs-on: ubuntu-22.04
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: Discover modules
        id: discover
        run: |
          echo "üîç Discovering Odoo modules..."
          modules=$(find . -name "__manifest__.py" -type f | sed 's|/__manifest__.py||' | sed 's|^\./||' | sort)
          
          if [ -z "$modules" ]; then
            echo "‚ùå No Odoo modules found"
            exit 1
          fi
          
          echo "üì¶ Found modules:"
          echo "$modules" | while read module; do
            echo "  - $module"
          done
          
          echo "modules<<EOF" >> $GITHUB_OUTPUT
          echo "$modules" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Detect changed modules
        id: changed
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
          else
            BASE_SHA="HEAD~1"
          fi
          
          changed_files=$(git diff --name-only $BASE_SHA HEAD)
          
          changed_modules=""
          while IFS= read -r module; do
            if echo "$changed_files" | grep -q "^$module/"; then
              changed_modules="$changed_modules $module"
            fi
          done <<< "${{ steps.discover.outputs.modules }}"
          
          echo "changed_modules=$changed_modules" >> $GITHUB_OUTPUT
          
      - name: Validate module structure
        if: steps.changed.outputs.changed_modules != ''
        run: |
          echo "‚úÖ Validating module structure..."
          
          for module in ${{ steps.changed.outputs.changed_modules }}; do
            echo "üìã Validating $module..."
            
            # Check required files
            if [ ! -f "$module/__manifest__.py" ]; then
              echo "‚ùå Missing __manifest__.py in $module"
              exit 1
            fi
            
            if [ ! -f "$module/__init__.py" ]; then
              echo "‚ö†Ô∏è Missing __init__.py in $module (recommended)"
            fi
            
            # Validate manifest syntax
            python -c "
            import ast
            import sys
            try:
                with open('$module/__manifest__.py', 'r') as f:
                    manifest = ast.literal_eval(f.read())
                
                required_keys = ['name', 'version', 'depends', 'author']
                for key in required_keys:
                    if key not in manifest:
                        print(f'‚ùå Missing required key: {key}')
                        sys.exit(1)
                
                print('‚úÖ Manifest validation passed')
            except Exception as e:
                print(f'‚ùå Manifest validation failed: {e}')
                sys.exit(1)
            "
                        
                        # Check for common issues
                        if [ -f "$module/models/__init__.py" ] && [ -z "$(ls -A $module/models/ 2>/dev/null | grep -v __init__.py)" ]; then
                          echo "‚ö†Ô∏è Empty models directory in $module"
                        fi
                        
                        echo "‚úÖ $module structure validation passed"
                      done