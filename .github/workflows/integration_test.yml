# Integration Tests - Full Module Installation
name: Integration Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      test_all_modules:
        description: 'Test all modules (not just changed)'
        required: false
        default: 'false'

jobs:
  integration-tests:
    runs-on: ubuntu-22.04
    # Run after unit tests complete
    needs: []
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: odoo
          POSTGRES_PASSWORD: odoo
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: Restore cached dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            /tmp/odoo
          key: ${{ runner.os }}-odoo-18.0-${{ hashFiles('**/requirements.txt') }}-v3
          restore-keys: |
            ${{ runner.os }}-odoo-18.0-
            
      - name: Install dependencies (if cache miss)
        run: |
          if [ ! -d "/tmp/odoo" ]; then
            echo "‚ö†Ô∏è Cache miss - installing dependencies..."
            sudo apt-get update
            sudo apt-get install -y libpq-dev python3-dev
            
            python -m pip install --upgrade pip
            pip install psycopg2-binary babel "lxml[html_clean]" pillow reportlab \
            python-dateutil pytz requests werkzeug jinja2 passlib decorator docutils \
            gevent greenlet markupsafe num2words ofxparse polib psutil python-stdnum \
            qrcode vobject xlsxwriter xlwt zeep pypdf freezegun rjsmin
            
            git clone --depth 1 --branch 18.0 https://github.com/odoo/odoo.git /tmp/odoo
            pip install -r /tmp/odoo/requirements.txt
          fi
          
          pip install -e /tmp/odoo
          
      - name: Detect modules to test
        id: modules
        run: |
          modules=$(find . -name "__manifest__.py" -type f | sed 's|/__manifest__.py||' | sed 's|^\./||')
          
          if [ "${{ github.event.inputs.test_all_modules }}" = "true" ]; then
            test_modules="$modules"
            echo "üîÑ Testing ALL modules (manual trigger)"
          else
            # Detect changed modules
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              BASE_SHA="${{ github.event.pull_request.base.sha }}"
            else
              BASE_SHA="HEAD~1"
            fi
            
            changed_files=$(git diff --name-only $BASE_SHA HEAD)
            test_modules=""
            
            while IFS= read -r module; do
              if echo "$changed_files" | grep -q "^$module/"; then
                test_modules="$test_modules $module"
              fi
            done <<< "$modules"
          fi
          
          echo "test_modules=$test_modules" >> $GITHUB_OUTPUT
          
      - name: Create Odoo configuration
        run: |
          cat > odoo.conf << EOF
          [options]
          db_host = localhost
          db_port = 5432
          db_user = odoo
          db_password = odoo
          addons_path = /tmp/odoo/addons,.
          log_level = info
          workers = 0
          max_cron_threads = 0
          EOF
          
      - name: Wait for services
        run: |
          echo "‚è≥ Waiting for services..."
          until pg_isready -h localhost -p 5432 -U odoo; do
            sleep 1
          done
          
          until redis-cli -h localhost -p 6379 ping | grep -q PONG; do
            sleep 1
          done
          
          echo "‚úÖ Services ready"
          
      - name: Run integration tests
        if: steps.modules.outputs.test_modules != ''
        run: |
          echo "üîó Running integration tests..."
          
          for module in ${{ steps.modules.outputs.test_modules }}; do
            echo "üß™ Integration testing $module..."
            
            db_name="integration_${module}_$(date +%s)"
            
            # Install module and run tests
            timeout 600 python3 /tmp/odoo/odoo-bin \
              -c odoo.conf \
              -d "$db_name" \
              --init="$module" \
              --test-enable \
              --stop-after-init \
              --log-level=info \
              || {
                echo "‚ùå Integration test failed for $module"
                
                # Get error logs
                echo "üìã Error logs:"
                tail -n 50 ~/.local/share/Odoo/logs/odoo.log || true
                
                exit 1
              }
            
            echo "‚úÖ $module integration test passed"
            
            # Test module upgrade
            echo "üîÑ Testing $module upgrade..."
            timeout 300 python3 /tmp/odoo/odoo-bin \
              -c odoo.conf \
              -d "$db_name" \
              --update="$module" \
              --stop-after-init \
              --log-level=warn \
              || {
                echo "‚ö†Ô∏è Module upgrade test failed for $module"
              }
            
            # Cleanup
            psql -h localhost -U odoo -c "DROP DATABASE IF EXISTS $db_name;" postgres || true
          done
          
        env:
          PGPASSWORD: odoo
          
      - name: Performance benchmark (optional)
        if: steps.modules.outputs.test_modules != '' && github.event_name == 'pull_request'
        continue-on-error: true
        run: |
          echo "üìä Running performance benchmarks..."
          
          for module in ${{ steps.modules.outputs.test_modules }}; do
            echo "‚è±Ô∏è Benchmarking $module installation..."
            
            db_name="bench_${module}_$(date +%s)"
            
            start_time=$(date +%s)
            
            python3 /tmp/odoo/odoo-bin \
              -c odoo.conf \
              -d "$db_name" \
              --init="$module" \
              --stop-after-init \
              --log-level=error \
              &>/dev/null || true
            
            end_time=$(date +%s)
            duration=$((end_time - start_time))
            
            echo "üìà $module installation took ${duration}s"
            
            psql -h localhost -U odoo -c "DROP DATABASE IF EXISTS $db_name;" postgres || true
          done
        env:
          PGPASSWORD: odoo