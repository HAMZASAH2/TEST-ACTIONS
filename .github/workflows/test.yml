# Optimized Odoo CI/CD Workflow
name: Odoo CI - Smart Testing

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  test-changed-modules:
    runs-on: ubuntu-22.04
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: odoo
          POSTGRES_PASSWORD: odoo
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history to compare changes
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            /tmp/odoo
          key: ${{ runner.os }}-odoo-${{ hashFiles('**/requirements.txt') }}-v2
          restore-keys: |
            ${{ runner.os }}-odoo-
            
      - name: Install minimal system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev python3-dev
            
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install psycopg2-binary pylint-odoo babel lxml pillow reportlab python-dateutil
          
      - name: Setup Odoo (cached)
        run: |
          if [ ! -d "/tmp/odoo" ]; then
            echo "üì• Downloading Odoo..."
            git clone --depth 1 --branch 18.0 https://github.com/odoo/odoo.git /tmp/odoo
            
            echo "üì¶ Installing Odoo requirements..."
            # Install core Odoo requirements
            pip install -r /tmp/odoo/requirements.txt || {
              echo "‚ö†Ô∏è Some requirements failed, installing essential ones..."
              pip install \
                babel \
                decorator \
                docutils \
                feedparser \
                gevent \
                greenlet \
                jinja2 \
                lxml \
                markupsafe \
                num2words \
                ofxparse \
                passlib \
                pillow \
                polib \
                psutil \
                python-dateutil \
                python-stdnum \
                pytz \
                qrcode \
                reportlab \
                requests \
                urllib3 \
                vobject \
                werkzeug \
                xlsxwriter \
                xlwt \
                zeep \
                pytz
            }
            
            # Make Odoo importable
            pip install -e /tmp/odoo
          else
            echo "‚úÖ Using cached Odoo installation"
          fi
          
      - name: Discover all modules
        id: discover
        run: |
          echo "üîç Discovering Odoo modules in repository..."
          
          # Find all modules (directories with __manifest__.py)
          modules=$(find . -name "__manifest__.py" -type f | sed 's|/__manifest__.py||' | sed 's|^\./||' | sort)
          
          if [ -z "$modules" ]; then
            echo "‚ùå No Odoo modules found in repository"
            echo "modules=" >> $GITHUB_OUTPUT
            echo "changed_modules=" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "üì¶ Found modules:"
          echo "$modules" | while read module; do
            echo "  - $module"
          done
          
          # Store all modules
          echo "modules<<EOF" >> $GITHUB_OUTPUT
          echo "$modules" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Detect changed modules
        id: changed
        run: |
          echo "üîÑ Detecting changed modules..."
          
          # Get the base branch for comparison
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
          else
            BASE_SHA="HEAD~1"
          fi
          
          # Get changed files
          changed_files=$(git diff --name-only $BASE_SHA HEAD)
          
          if [ -z "$changed_files" ]; then
            echo "‚ÑπÔ∏è No files changed"
            echo "changed_modules=" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "üìù Changed files:"
          echo "$changed_files"
          
          # Find which modules contain changed files
          changed_modules=""
          while IFS= read -r module; do
            if echo "$changed_files" | grep -q "^$module/"; then
              if [ -z "$changed_modules" ]; then
                changed_modules="$module"
              else
                changed_modules="$changed_modules $module"
              fi
            fi
          done <<< "${{ steps.discover.outputs.modules }}"
          
          if [ -z "$changed_modules" ]; then
            echo "‚ÑπÔ∏è No module changes detected"
          else
            echo "üéØ Changed modules:"
            for module in $changed_modules; do
              echo "  - $module"
            done
          fi
          
          echo "changed_modules=$changed_modules" >> $GITHUB_OUTPUT
          
      - name: Validate changed modules
        if: steps.changed.outputs.changed_modules != ''
        run: |
          echo "‚úÖ Validating changed modules..."
          
          for module in ${{ steps.changed.outputs.changed_modules }}; do
            echo "üìã Validating $module..."
            
            # Check manifest file
            if [ ! -f "$module/__manifest__.py" ]; then
              echo "‚ùå Missing __manifest__.py in $module"
              exit 1
            fi
            
            # Basic Python syntax check
            python -m py_compile "$module/__manifest__.py"
            
            # Check for required files
            if [ ! -f "$module/__init__.py" ]; then
              echo "‚ö†Ô∏è Missing __init__.py in $module"
            fi
            
            echo "‚úÖ $module validation passed"
          done
          
      - name: Create pylint configuration
        if: steps.changed.outputs.changed_modules != ''
        run: |
          echo "‚öôÔ∏è Creating pylint configuration..."
          
          cat > .pylintrc << EOF
          [MASTER]
          load-plugins=pylint_odoo
          score=y
          
          [ODOOLINT]
          readme_template_url="https://github.com/OCA/maintainer-tools/blob/master/template/module/README.rst"
          manifest_required_authors=True
          manifest_required_keys=name,author,website,license
          manifest_deprecated_keys=description,active
          
          [MESSAGES CONTROL]
          disable=all
          enable=odoolint,
                 anomalous-backslash-in-string,
                 dangerous-default-value,
                 duplicate-key,
                 missing-import-error,
                 missing-manifest-dependency,
                 pointless-statement,
                 print-statement,
                 redundant-keyword-arg,
                 reimported,
                 relative-import,
                 unused-argument,
                 unused-variable,
                 wrong-import-order
          
          [REPORTS]
          reports=no
          EOF
          
      - name: Run pylint on changed modules
        if: steps.changed.outputs.changed_modules != ''
        run: |
          echo "üîç Running pylint on changed modules..."
          
          for module in ${{ steps.changed.outputs.changed_modules }}; do
            echo "üß™ Linting $module..."
            
            pylint_output=$(pylint --load-plugins=pylint_odoo \
              --rcfile=.pylintrc \
              "$module" \
              --exit-zero \
              --output-format=text)
            
            echo "$pylint_output"
            
            # Extract score
            score=$(echo "$pylint_output" | grep -o 'rated at [0-9.]*' | grep -o '[0-9.]*' | head -1)
            
            if [ ! -z "$score" ]; then
              echo "üìä $module pylint score: $score/10"
              
              # Check minimum score (6.0 for faster feedback)
              if (( $(echo "$score < 6.0" | bc -l) )); then
                echo "‚ùå $module failed pylint check (score: $score < 6.0)"
                exit 1
              fi
            else
              echo "‚ÑπÔ∏è No pylint score found for $module, checking for critical errors..."
              if echo "$pylint_output" | grep -q "E:"; then
                echo "‚ùå $module has critical errors"
                exit 1
              fi
            fi
          done
          
      - name: Run Odoo tests on changed modules
        if: steps.changed.outputs.changed_modules != ''
        run: |
          echo "üß™ Running Odoo tests on changed modules..."
          
          # Create minimal config
          cat > odoo.conf << EOF
          [options]
          db_host = localhost
          db_port = 5432
          db_user = odoo
          db_password = odoo
          addons_path = /tmp/odoo/addons,.
          log_level = warn
          EOF
          
          # Wait for PostgreSQL
          until pg_isready -h localhost -p 5432 -U odoo; do
            echo "‚è≥ Waiting for PostgreSQL..."
            sleep 1
          done
          
          # Test each changed module
          for module in ${{ steps.changed.outputs.changed_modules }}; do
            echo "üß™ Testing $module..."
            
            db_name="test_${module}_$(date +%s)"
            
            # Run tests for this specific module
            timeout 300 python3 /tmp/odoo/odoo-bin \
              -c odoo.conf \
              -d "$db_name" \
              --init="$module" \
              --test-enable \
              --stop-after-init \
              --log-level=error \
              || {
                echo "‚ùå Tests failed for $module"
                exit 1
              }
            
            echo "‚úÖ $module tests passed"
            
            # Cleanup database
            psql -h localhost -U odoo -c "DROP DATABASE IF EXISTS $db_name;" postgres || true
          done
          
        env:
          PGPASSWORD: odoo
          
      - name: Summary
        if: always()
        run: |
          echo "üìä CI/CD Summary:"
          echo "üì¶ Total modules found: $(echo '${{ steps.discover.outputs.modules }}' | wc -w)"
          
          if [ ! -z "${{ steps.changed.outputs.changed_modules }}" ]; then
            echo "üéØ Changed modules tested: ${{ steps.changed.outputs.changed_modules }}"
            echo "‚úÖ All changed modules passed validation and tests"
          else
            echo "‚ÑπÔ∏è No modules changed - skipping tests"
          fi